package practice.java.datastructures;

public class BinarySearchTree {

	public class Node {
		int data;
		Node left;
		Node right;

		Node(int data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

	Node root;

	BinarySearchTree() {
		root = null;
	}

	BinarySearchTree(int data) {
		root = new Node(data);
	}

	public void insert(int data) {
		root = insertRecursive(root, data);
	}

	public Node insertRecursive(Node root, int data) {

		if (root == null) {
			root = new Node(data);
			return root;
		}

		if (data < root.data) {
			root.left = insertRecursive(root.left, data);
		} else {
			root.right = insertRecursive(root.right, data);
		}

		return root;
	}

	void traversal(String val) {
		switch (val) {
		case "inorder":
			inOrderRecursive(root);
			break;
		case "preorder":
			preOrderRecursive(root);
			break;
		case "postorder":
			postOrderRecursive(root);
			break;
		default:
			System.out.println("Invalid travelsal chosen");
			break;
		}
	}

	void inOrderRecursive(Node root) {
		if (root != null) {
			inOrderRecursive(root.left);
			System.out.print(root.data + " ");
			inOrderRecursive(root.right);
		}
	}
	
	void preOrderRecursive(Node root) {
		if (root != null) {
			System.out.print(root.data + " ");
			inOrderRecursive(root.left);
			inOrderRecursive(root.right);
		}
	}
	
	void postOrderRecursive(Node root) {
		if (root != null) {
			inOrderRecursive(root.left);
			inOrderRecursive(root.right);
			System.out.print(root.data + " ");
		}
	}
	

}
